<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   applicationDPI="160" 
			   applicationComplete="init(event)">
	
	<fx:Style source="styles.css"/>
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import flash.utils.Timer;
			import flash.events.MouseEvent;
			import flash.events.TimerEvent;
			import flash.events.Event;
			import spark.events.IndexChangeEvent;
			
			import AIRViews.AccelerometerView;
			import AIRViews.SQLiteView;
			
			import LayoutViews.AccordionLayoutView;
			import LayoutViews.CarouselLayoutView;
			import LayoutViews.CoverFlowLayoutView;
			import LayoutViews.HorizontalLayoutView;
			import LayoutViews.RolodexLayoutView;
			import LayoutViews.TileLayoutView;
			import LayoutViews.TimeMachineLayoutView;
			import LayoutViews.VerticalLayoutView;
			
			import UIViews.ButtonBarView;
			import UIViews.CalloutButtonView;
			import UIViews.CheckboxView;
			import UIViews.DateSpinnerView;
			import UIViews.ListView;
			import UIViews.MobileGridView;
			import UIViews.RadiobuttonView;
			import UIViews.SpinnerListView;
			import UIViews.TextInputView;
			import UIViews.ToggleSwitchView;
			
			import views.HttpServiceView;
			
			private var isOpen:Boolean;	
			
			[Bindable]
			private var currentStageWidth:Number;
			
			[Bindable]
			private var currentStageHeight:Number;
			
			public static var SLIDE_INTERVAL:int = 40;			
			public static var STEPS:int = 6; 
			
			protected var _slideTimer:Timer = new Timer(SLIDE_INTERVAL, STEPS);
			public static const CLICKED:String = "slideOutClicked";
			protected var _buttonEnabled:Boolean = true;
			protected var _startX:Number;
			
			
			protected function init(event:FlexEvent):void
			{
				btn.addEventListener(MouseEvent.CLICK, slideButtonHandler);
				_slideTimer.addEventListener(TimerEvent.TIMER, doSlide);		
				_slideTimer.addEventListener(TimerEvent.TIMER_COMPLETE, slideComplete); 				
			}
			
/*******************************************
	*used some code from Macomponents UISlideOutNavigation, replaced the actionscript elements with flex UI elements and was able to apply
	*the same drag to close behavior
*********************************************/  
			
			public function open(animated:Boolean = true):void 
			{				
				if (!navigators.mouseEnabled)					
					return;				
				navigators.mouseEnabled = navigators.mouseChildren = false;				
				if (animated) 
				{					
					_slideTimer.repeatCount = Math.max(Math.floor(STEPS * (1 - navigators.x / lateralMenu.width)), 1);					
					_slideTimer.reset();				
					_slideTimer.start();	
				}					
				else 
				{	
					navigators.x = lateralMenu.width;	
					!navigators.mouseEnabled;
				}				
			}
			
			public function close(animated:Boolean = true):void 
			{				
				navigators.mouseEnabled = navigators.mouseChildren = true;				
				if (animated) 
				{					
					_slideTimer.repeatCount = Math.max(Math.floor(STEPS * navigators.x / lateralMenu.width), 1);					
					_slideTimer.reset();					
					_slideTimer.start();					
				}				
				else 
				{					
					navigators.x = 0;				
				}			
			} 
		
			protected function changeHandler(event:IndexChangeEvent):void
			{
				close();
				stage.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDown); 
				navigator.pushView(componentsList.selectedItem.view);
			}
			
			
			
			protected function slideButtonHandler(event:Event):void 
			{				
				dispatchEvent(new Event(CLICKED));				
				navigators.mouseEnabled = navigators.mouseChildren = !navigators.mouseEnabled;		
				if (_buttonEnabled) 
				{					
					_slideTimer.repeatCount = STEPS;				
					_slideTimer.reset();				
					_slideTimer.start();					
				}
				
			}
						
			protected function mouseDown(event:MouseEvent):void 
			{			
				if (!navigators.mouseEnabled && mouseX > lateralMenu.width && mouseY > 45) 
				{					
					_startX = mouseX;				
					stage.addEventListener(MouseEvent.MOUSE_UP, mouseUp);					
					stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);			
				}		
			} 			
			
			protected function doSlide(event:TimerEvent):void 
			{				
				var slideTimer:Timer = Timer(event.currentTarget);				
				var t:Number = slideTimer.currentCount/slideTimer.repeatCount;			
				navigators.x = (navigators.mouseEnabled ? (1-t) : t) * lateralMenu.width;				
			} 
			
			protected function slideComplete(event:TimerEvent):void 
			{				
				removeEventListener(MouseEvent.MOUSE_DOWN, mouseDown);	
				navigators.mouseEnabled;
				if (!navigators.mouseEnabled) 
				{					
					addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);					
				}				
			} 
			
			protected function mouseMove(event:MouseEvent):void 
			{							
				navigators.x = Math.max(Math.min(mouseX - _startX + lateralMenu.width, lateralMenu.width), 0);				
			} 
			
			protected function mouseUp(event:MouseEvent):void 
			{		
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUp);				
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);				
				navigators.mouseEnabled = navigators.mouseChildren = mouseX < lateralMenu.width / 2;			
				_slideTimer.repeatCount = Math.max(navigators.mouseEnabled ? Math.floor(STEPS * navigators.x / lateralMenu.width) : Math.floor(STEPS * (1 - navigators.x / lateralMenu.width)), 1);				
				_slideTimer.reset();				
				_slideTimer.start();
				
			}
					
		]]>
	</fx:Script>
	
	<fx:Declarations>

	</fx:Declarations>
	
	
	
	<s:Group id="lateralMenu" width="225" y="0" height="100%">
		
		<s:List id="componentsList" itemRenderer="renderers.MenuRenderer" width="225" height="100%" 
				change="changeHandler(event)" contentBackgroundColor="#000000">
			<s:ArrayList>
				<fx:Object label="UI Components" type="separator"/>			
				<fx:Object label="ButtonBar" type="view" view="{ButtonBarView}"/>
				<fx:Object label="CalloutButton" type="view" view="{CalloutButtonView}"/>
				<fx:Object label="CheckBox" type="view" view="{CheckboxView}"/>
				<fx:Object label="DateSpinner" type="view" view="{DateSpinnerView}"/>
				<fx:Object label="List" type="view" view="{ListView}"/>
				<fx:Object label="MobileGrid" type="view" view="{MobileGridView}"/>
				<fx:Object label="RadioButton" type="view" view="{RadiobuttonView}"/>
				<fx:Object label="SpinnerList" type="view" view="{SpinnerListView}"/>
				<fx:Object label="TextInput" type="view" view="{TextInputView}"/>
				<fx:Object label="ToggleSwitch" type="view" view="{ToggleSwitchView}"/>
				
				<fx:Object label="Layouts" type="separator"/>				
				<fx:Object label="HorizontalLayout" type="view" view="{HorizontalLayoutView}"/>
				<fx:Object label="VerticalLayout" type="view" view="{VerticalLayoutView}"/>
				<fx:Object label="TileLayout" type="view" view="{TileLayoutView}"/>
				<fx:Object label="CoverFlowLayout" type="view" view="{CoverFlowLayoutView}"/>
				<fx:Object label="TimeMachineLayout" type="view" view="{TimeMachineLayoutView}"/>
				<fx:Object label="RolodexLayout" type="view" view="{RolodexLayoutView}"/>
				<fx:Object label="CarouselLayout" type="view" view="{CarouselLayoutView}"/>
				<fx:Object label="AccordionLayout" type="view" view="{AccordionLayoutView}"/>
				
				<fx:Object label="AIR APIs" type="separator"/>				
				<fx:Object label="SQLite" type="view" view="{SQLiteView}"/>
				<fx:Object label="Accelerometer" type="view" view="{AccelerometerView}"/>
				
				<fx:Object label="Data Access" type="separator"/>			
				<fx:Object label="HTTPService" type="view" view="{HttpServiceView}"/>
			</s:ArrayList>
		</s:List>
	</s:Group>
	
	<s:Group id="navigators" width="{FlexGlobals.topLevelApplication.width}" height="{FlexGlobals.topLevelApplication.height}">
		<s:ViewNavigator id="navigator" firstView="views.BlogView" width="100%" height="100%">
			<s:navigationContent>
				<s:Button icon="@Embed('assets/images/logo.png')" height="35" width="77" label="Menu" id="btn"/>
			</s:navigationContent>
		</s:ViewNavigator>
	</s:Group>
</s:Application>
